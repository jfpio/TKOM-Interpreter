program                 = declaration, {declaration}, {comment};

declaration             = 
   varDeclaration
   | functionDeclaration
;
comment                 = "/*", {string} "*/";

(* VARIABLE *)
varDeclaration          = type, varDeclarationInit;
varDeclarationInit      = varDeclarationId, ['=', simpleExpression];
varDeclarationId        = ID;

(* FUNCTION *)
functionDeclaration     = [type], ID, "(", parms, ")", statement;
parms                   = {type, ID};

(* STATEMENTS *)
statement               = 
   expressionStatement
   | compoundStatement
   | ifStatement
   | whileStatement
   | returnStatement
   | exceptionStatement
;

returnStatement         = "return", [expressionStatement], ";";
whileStatement          = "while", "(", simpleExpression, ")", statement;
ifStatement             = "if", "(" simpleExpression, ")", statement;
compoundStatement       = "{", {varDeclaration}, {statement} "}";
expressionStatement     = [expression], ";";
exceptionStatement      = "try", statement, ["catch", statement];

(* Expressions*)
expression              =
   (mutable, "=", expression)
   | simpleExpression
;

simpleExpression        = {simpleExpression, "or"}, andExpression;
andExpression           = {andExpression, "and"}, reliatonshipExpression;
reliatonshipExpression  = sumExpression, [reliatonshipOperand, sumExpression];
sumExpression           = sumExpression, sumOperand, multiplyExpression;
multiplyExpression      = [multiplyExpression, multiplyOperand], factor;

factor                  = ["(", type, ")"],
   (
      immutable
      | mutable
   )
;
immutable               = 
   "(", expression, ")" 
   | call
   | constant
   ;

mutable                 = ID;
call                    = ID, "(", args, ")";
args                    = {exp};
constant                = 
   int
   | float
   | string
   | bool
   | currency
;

reliatonshipOperand     = 
   "<="
   | "<"
   | ">",
   | ">=",
   | "==",
   | "!="
;
sumOperand              = 
   "+"
   | "-"
;
multiplyOperand         =
   "*"
   | "/"
   | "%"
;

type                    = 
   "int"
   | "float"
   | "string"
   | "bool"
   | CURRENCY_NAME
;

int                     = 
   [-]
   ,
   "0" 
   | "1-9",{DIGIT}
;

float                   =
   int, '.' , DIGIT, {DIGIT}
;

currency                = 
   (
      int 
      | float
   )
   ,
   CURRENCY_NAME
;

string                  = "'", {CHAR} "'";

ID                      = LETTER, {DIGIT | LETTER};
DIGIT                   = "0-9";
LETTER                  =
   "a-z"
   | "A-Z"
;
SYMBOL                  = "[" | "]" | "{" | "}" | "(" | ")" | "<" | ">" | "'" | '"' | "=" | "|" | "." | "," | ";" "_";

CHAR                    = 
   DIGIT
   | LETTER
   | SYMBOL
;

CURRENCY_NAME           = ; (*I.E. 'PLN' | 'EUR' | 'USD';*)