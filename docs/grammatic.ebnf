program = declaration, {declaration};

declaration = varDeclaration 
   | functionDeclaration
   | currencyDeclaration
;

(* CURRENCY *)
currencyDeclaration = currency_ID, ":=", float | int, ";";
(* VARIABLE *)
varDeclaration = type, varDeclarationInit;
varDeclarationInit = ID, ['=', expression];

(* FUNCTION *)
functionDeclaration = [type], ID, "(", parms, ")", "{", statement, "}";
parms = {type, ID};

(* STATEMENTS *)
statement = compoundStatement
   | ifStatement
   | whileStatement
   | returnStatement
;

returnStatement = "return", [expression], ";";
whileStatement = "while", "(", expression, ")", "{", statement "}";
ifStatement = "if", "(" expression, ")", "{", statement "}";
compoundStatement = {varDeclaration}, {assignment}, {statement};

(* Expressions*)
expression = andExpression, {"or", expression};
andExpression = relationshipExpression, {"and", andExpression};
relationshipExpression = sumExpression, [relationshipExpression, sumExpression];
sumExpression = multiplyExpression, sumOperand, sumExpression;
multiplyExpression = factor, [multiplyOperand, multiplyExpression];

assignment = (mutable, "=", expression);
factor = ["(", type, ")"],(
      immutable
      | mutable
   )
;

immutable =
   ["!"], (
      "(", expression, ")" 
      | call
      | constant
   )
   ;

mutable = ID;
call = ID, "(", args, ")";
args = {expression};
constant = 
   int
   | float
   | string
   | bool
   | currency
;

relationshipExpression =
   "<="
   | "<"
   | ">",
   | ">=",
   | "==",
   | "!="
;

sumOperand = 
   "+"
   | "-"
;

multiplyOperand =
   "*"
   | "/"
   | "%"
;

type = 
   "int"
   | "float"
   | "string"
   | "bool"
   | "void"
   | currency_ID
;

int = [-], "0" | "1-9",{DIGIT};
float = int, '.' , DIGIT, {DIGIT};
currency = (int | float), currency_ID;

string = "'", {CHAR} "'";

ID = SMALL_LETTER, {"_" | SMALL_LETTER};
currency_ID = CAPITAL_LETTER, CAPITAL_LETTER, CAPITAL_LETTER; 

CHAR = 
   DIGIT
   | LETTER
   | SYMBOL
;

LETTER =
   SMALL_LETTER
   | CAPITAL_LETTER
;

SMALL_LETTER = "a-z";
CAPITAL_LETTER = "A-Z";
SYMBOL = "[" | "]" | "{" | "}" | "(" | ")" | "<" | ">" | "'" | '"' | "=" | "|" | "." | "," | ";" "_";
DIGIT = "0-9";
